{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,qBACpCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,sBAkB3C,SAASG,EAAcC,EAAUC,GAdjC,IAAuBC,EAAUC,GAAVD,EAePF,EAfiBG,EAePF,EAdR,IAAIG,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,OAOFQ,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBS,EAAApB,GAASqB,OAAOC,QAAQ,uBAAqBZ,QAAiBC,MAAW,CACtEY,QAAS,SAGbC,OAAM,EAACd,SAAEA,EAAQC,MAAEA,MAClBS,EAAApB,GAASqB,OAAOI,QAAQ,sBAAoBf,QAAeC,MAAW,CAClEY,QAAS,SA1BNpB,SAASC,cAAc,SA+C/BsB,iBAAiB,UAhBtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIlB,EAAW,EACXC,EAAQkB,OAAO3B,EAAW4B,OAC1BC,EAAOF,OAAOxB,EAAUyB,OAC5BvB,EAAcG,EAAUC,GAExB,IAAK,IAAIqB,EAAI,EAAGA,EAAI1B,EAAYwB,MAAOE,IACrCtB,GAAY,EACZC,GAASoB,EACTxB,EAAcG,EAAUC,GAG1BgB,EAAIM,cAAcC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayInput = document.querySelector('input[name=delay]');\nconst stepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\nconst form = document.querySelector(\".form\")\n\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)\n  });\n  return promise;\n};\n\nfunction promiseResult(position, delay) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`,\n        {timeout: 5000}\n      );\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`,\n        { timeout: 5000 }\n      );\n    });\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let position = 1;\n  let delay = Number(delayInput.value);\n  let step = Number(stepInput.value);\n  promiseResult(position, delay);\n\n  for (let i = 1; i < amountInput.value; i++) {\n    position += 1;\n    delay += step;\n    promiseResult(position, delay);\n  };\n\n  evt.currentTarget.reset();\n};\n\nform.addEventListener('submit', onFormSubmit);"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$delayInput","document","querySelector","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$promiseResult","position1","delay1","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","success","timeout","catch","failure","addEventListener","evt","preventDefault","Number","value","step","i","currentTarget","reset"],"version":3,"file":"03-promises.8c2e4c5b.js.map"}