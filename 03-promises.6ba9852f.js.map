{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,qBACpCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,sBAkB3C,SAASG,EAAcC,EAAUC,IAdjC,SAAuBD,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,OAMLQ,CAAcT,EAAUC,GACrBS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MACjBa,EAAAtB,GAASuB,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,MAClE,CAADK,QAAS,SAGbC,OAAM,SAAAR,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MAClBa,EAAAtB,GAASuB,OAAOK,QAAQ,sBAAqCH,OAAfL,EAAS,QAAYK,OAANJ,EAAM,MACjE,CAAEK,QAAS,SA1BNvB,SAASC,cAAc,SA+C/ByB,iBAAiB,UAhBtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIvB,EAAW,EACXC,EAAQuB,OAAO9B,EAAW+B,OAC1BC,EAAOF,OAAO3B,EAAU4B,OAC5B1B,EAAcC,EAAUC,GAExB,IAAK,IAAI0B,EAAI,EAAGA,EAAI7B,EAAY2B,MAAOE,IAGrC5B,EAFAC,GAAY,EACZC,GAASyB,GAIXJ,EAAIM,cAAcC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayInput = document.querySelector('input[name=delay]');\nconst stepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\nconst form = document.querySelector(\".form\")\n\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)\n  });\n  return promise;\n};\n\nfunction promiseResult(position, delay) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`,\n        {timeout: 5000}\n      );\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`,\n        { timeout: 5000 }\n      );\n    });\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let position = 1;\n  let delay = Number(delayInput.value);\n  let step = Number(stepInput.value);\n  promiseResult(position, delay);\n\n  for (let i = 1; i < amountInput.value; i++) {\n    position += 1;\n    delay += step;\n    promiseResult(position, delay);\n  };\n\n  evt.currentTarget.reset();\n};\n\nform.addEventListener('submit', onFormSubmit);"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$promiseResult","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","addEventListener","evt","preventDefault","Number","value","step","i","currentTarget","reset"],"version":3,"file":"03-promises.6ba9852f.js.map"}